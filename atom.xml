<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-03T09:06:36.561Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScriptES6（Day2）</title>
    <link href="http://example.com/2021/10/03/JavaScriptES6%EF%BC%88Day2%EF%BC%89/"/>
    <id>http://example.com/2021/10/03/JavaScriptES6%EF%BC%88Day2%EF%BC%89/</id>
    <published>2021-10-03T09:05:56.000Z</published>
    <updated>2021-10-03T09:06:36.561Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串扩展—多行字符串"><a href="#字符串扩展—多行字符串" class="headerlink" title="字符串扩展—多行字符串"></a>字符串扩展—多行字符串</h3><p>单行字符串：由一组单引号或者双引号定义的字符串</p><p>单行字符串的问题：</p><ol><li>单行字符串不能换行</li><li>一些特殊的字符串要使用转义字符\n</li><li>一些特殊的字符串要使用转义字符\x20</li><li>字符串不能直接使用嵌套</li></ol><p>单引号中不能直接写单引号，要转义\‘ </p><p>双引号中不能直接写双引号，要转义 \ “</p><p>ES6为了解决单行字符串中的问题，提供了多行字符串，通过 <code>   定义，在多行字符串中，只有</code>需要转义`，<br>其他字符可以自由书写<br>并且ES6多行字符串支持插值语法：${key}<br>${}提供了js环境，因此我们可以写js表达式<br>ES6的插值语法，让其他框架的插值语法的重要性，大打折扣</p><h3 id="字符穿拓展—-原始字符串"><a href="#字符穿拓展—-原始字符串" class="headerlink" title="字符穿拓展—-原始字符串"></a>字符穿拓展—-原始字符串</h3><p>在使用了转义字符串之后，并且在浏览器查看的时候，我们只能看到结果，不能看到原始完整的字符串（包含转移字符），于是在ES6中拓展了String.raw方法用于查看原始字符串</p><p>使用方法：   <code>Sring.raw</code>参数通过字符串的形式进行传递，字符串中的转义字符串不会被转义</p><p>例：<code>let str = String.raw&#39;hello \nic\nkt&#39;; console.log(str); </code>打印出的结果就是原始的字符串<code>hello \nic\nkt</code></p><p>同时对于普通的字符串不让\n生效就需要改变成 \ \n</p><h3 id="字符串拓展—重复字符串"><a href="#字符串拓展—重复字符串" class="headerlink" title="字符串拓展—重复字符串"></a>字符串拓展—重复字符串</h3><p>ES6中扩展了repeat方法用于重复输出字符串</p><p>​    参数就是要重复的次数</p><p>​    返回值就是重复的结果</p><p>​    对原始字符串没有影响</p><p>例：<code>let str=&#39;hello||&#39;; console.log(str.repeat(3)); console.log(str);</code>打印出来的结果分别就是 <code>hello || hello || hello||</code> <code>hello ||</code></p><h3 id="字符串拓展–判断字符串的位置"><a href="#字符串拓展–判断字符串的位置" class="headerlink" title="字符串拓展–判断字符串的位置"></a>字符串拓展–判断字符串的位置</h3><ol><li>startsWith(str,pos)     是否以参数字符串开头</li></ol><p>​    截取后面的部分，并且截取位置字符</p><p>​    str 参数字符串（子字符串）</p><p>​    pos    字符串截取位置</p><p>​    返回值都是bool</p><p>​    例：<code>let str=&quot;这是一个测试&quot;; console.log(str.startsWith(&#39;这&#39;))</code> <code> return : true</code></p><p>​            <code>console.log(str.startWith(&#39;是&#39;);</code> <code>return : false</code></p><ol start="2"><li>endsWith(str,pos)    是否以字符串结尾</li></ol><p>​    截取前面的部分，并且不包含截取位置字符</p><ol start="3"><li>includes(str,pos)     是否包含参数字符串</li></ol><p>​    截取后面的部分，并且包含截取位置字符</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;字符串扩展—多行字符串&quot;&gt;&lt;a href=&quot;#字符串扩展—多行字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串扩展—多行字符串&quot;&gt;&lt;/a&gt;字符串扩展—多行字符串&lt;/h3&gt;&lt;p&gt;单行字符串：由一组单引号或者双引号定义的字符串&lt;/p&gt;
&lt;p&gt;单行字</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Let Const Var</title>
    <link href="http://example.com/2021/10/02/Let/"/>
    <id>http://example.com/2021/10/02/Let/</id>
    <published>2021-10-02T05:55:20.000Z</published>
    <updated>2021-10-02T06:04:09.899Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Let-Const-Var的区别"><a href="#Let-Const-Var的区别" class="headerlink" title="Let Const Var的区别"></a>Let Const Var的区别</h3><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><ol><li>var只有函数作用域，没有块作用域，可以声明全局/局部变量（在一共函数内声明的变量，只在该函数有效）</li><li>var定义的变量不能跨函数访问，但是可以跨块访问！</li><li>var 定义的变量如果不初始化会输出undefined，但不会报错</li><li>可以重复定义，后定义的会覆盖先定义的。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);   <span class="comment">//undefined,定义没赋值</span></span><br><span class="line"><span class="comment">//-----------------------------------------</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;   <span class="comment">//全局变量 第一次定义</span></span><br><span class="line"><span class="built_in">console</span>.log(a);    <span class="comment">// a：1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);  <span class="comment">//此时之前var a=1的值已经被改变</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">A(); <span class="comment">//调用A方法</span></span><br><span class="line"><span class="built_in">console</span>.log(a);   <span class="comment">//调用A函数，a变为函数A内部修改的值：2</span></span><br><span class="line"><span class="comment">//---------------------------------------------</span></span><br><span class="line"><span class="keyword">var</span> b=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);  <span class="comment">//2,后面的声明覆盖了前面的声明</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ol><li>块级作用域内有效；</li><li><code>const</code>声明的变量不得改变值，这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值。</li><li>对于复合类型的变量，如数组和对象，变量名不指向数据，而是指向数据所在的地址。<code>const</code>命令只是保证变量名指向的地址不变，并不保证该地址的数据不变，所以将一个对象声明为常量必须非常小心。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a ;<span class="comment">//报错 定义const 之后应该立即赋值</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line">b = <span class="number">3</span><span class="comment">//const赋的值不能直接 =</span></span><br><span class="line"><span class="keyword">const</span> names = [];</span><br><span class="line">names = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="comment">//报错，const赋的值不能直接 = </span></span><br></pre></td></tr></table></figure><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ol><li>let是块级作用域，函数内部使用let定义后，对函数外部无影响</li><li>let定义的变量只能在块作用域中访问，不能跨块访问，更不能跨函数访问</li><li>不能变量声明提前，否则会报错</li><li>不能重复定义，否则会报错</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a =<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 全局变量1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);  <span class="comment">//局部变量：2</span></span><br><span class="line">&#125;</span><br><span class="line">A();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;A()函数调用后，a++&quot;</span>);  </span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> b=<span class="number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);  <span class="comment">//  2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b);   <span class="comment">//1</span></span><br><span class="line"> <span class="built_in">console</span>.log(aaa);</span><br><span class="line"> <span class="keyword">let</span> aaa=<span class="number">1</span>;   <span class="comment">//会进行报错，不能变量声明提前</span></span><br><span class="line"> <span class="keyword">let</span> p = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">let</span> p = <span class="number">2</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(p);  <span class="comment">//重复定义，会报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Let-Const-Var的区别&quot;&gt;&lt;a href=&quot;#Let-Const-Var的区别&quot; class=&quot;headerlink&quot; title=&quot;Let Const Var的区别&quot;&gt;&lt;/a&gt;Let Const Var的区别&lt;/h3&gt;&lt;h3 id=&quot;var&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScriptES6（day1）</title>
    <link href="http://example.com/2021/10/02/JavaScriptES6%EF%BC%88day1%EF%BC%89/"/>
    <id>http://example.com/2021/10/02/JavaScriptES6%EF%BC%88day1%EF%BC%89/</id>
    <published>2021-10-02T05:32:54.000Z</published>
    <updated>2021-10-02T05:33:42.516Z</updated>
    
    <content type="html"><![CDATA[<h4 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a>const关键字</h4><p>const关键字用于定义常量（一旦定义无法改变的变量，通常是表示一些固定不变的数据）</p><p>使用const 的特点</p><ol><li><p>无法修改</p></li><li><p> 支持块作用域</p></li><li><p> 无法重复定义</p></li><li><p> 无法声明前置</p></li><li><p> 不能被windows挂载</p></li><li><p>不能作为for循环体中的变量使用</p></li><li><p>值只能是值类型，如果是引用类型则可以被修改</p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> number = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  number = <span class="number">99</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="comment">// expected output: TypeError: invalid assignment to const `number&#x27;</span></span><br><span class="line">  <span class="comment">// Note - error messages will vary depending on browser</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(number);</span><br><span class="line"><span class="comment">// expected output: 42</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name1 = value1 [, name2 = value2 [, ... [, nameN = valueN]]];</span><br><span class="line"><span class="comment">//nameN</span></span><br><span class="line"><span class="comment">//常量名称，可以是任意合法的标识符。</span></span><br><span class="line"><span class="comment">//valueN</span></span><br><span class="line"><span class="comment">//常量值，可以是任意合法的表达式。</span></span><br></pre></td></tr></table></figure><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>此声明创建一个常量，其作用域可以是全局或本地声明的块。 与<code>var</code>变量不同，全局常量不会变为 window 对象的属性。需要一个常数的初始化器；也就是说，您必须在声明的同一语句中指定它的值（这是有道理的，因为以后不能更改）。</p><p>**<code>const</code>**<strong>声明</strong>创建一个值的只读引用。但这并不意味着它所持有的值是不可变的，只是变量标识符不能重新分配。例如，在引用内容是对象的情况下，这意味着可以改变对象的内容（例如，其参数）。</p><p>关于“<a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_and_errors_with_let" >暂存死区<i class="fas fa-external-link-alt"></i></a>”的所有讨论都适用于<code>let</code>和<code>const</code>。</p><p>一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称。</p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><h4 id="基本用法："><a href="#基本用法：" class="headerlink" title="基本用法："></a>基本用法：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义常量MY_FAV并赋值7</span></span><br><span class="line"><span class="keyword">const</span> MY_FAV = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错 - Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line">MY_FAV = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MY_FAV is 7</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;my favorite number is: &#x27;</span> + MY_FAV);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试重新声明会报错</span></span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Identifier &#x27;MY_FAV&#x27; has already been declared</span></span><br><span class="line"><span class="keyword">const</span> MY_FAV = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MY_FAV 保留给上面的常量，这个操作会失败</span></span><br><span class="line"><span class="keyword">var</span> MY_FAV = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也会报错</span></span><br><span class="line"><span class="keyword">let</span> MY_FAV = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="块作用域："><a href="#块作用域：" class="headerlink" title="块作用域："></a>块作用域：</h4><p>注意块作用域的性质很重要</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (MY_FAV === <span class="number">7</span>) &#123;</span><br><span class="line">  <span class="comment">// 没问题，并且创建了一个块作用域变量 MY_FAV</span></span><br><span class="line">  <span class="comment">// (works equally well with let to declare a block scoped non const variable)</span></span><br><span class="line">  <span class="keyword">let</span> MY_FAV = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// MY_FAV 现在为 20</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;my favorite number is &#x27;</span> + MY_FAV);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这被提升到全局上下文并引发错误</span></span><br><span class="line">  <span class="keyword">var</span> MY_FAV = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MY_FAV 依旧为7</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;my favorite number is &#x27;</span> + MY_FAV);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常量需要一个初始值"><a href="#常量需要一个初始值" class="headerlink" title="常量需要一个初始值"></a>常量需要一个初始值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Missing initializer in const declaration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> FOO;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常量可以定义为对象或者数组："><a href="#常量可以定义为对象或者数组：" class="headerlink" title="常量可以定义为对象或者数组："></a>常量可以定义为对象或者数组：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MY_OBJECT = &#123;<span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;value&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写对象和上面一样会失败</span></span><br><span class="line"><span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line">MY_OBJECT = &#123;<span class="string">&#x27;OTHER_KEY&#x27;</span>: <span class="string">&#x27;value&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象属性并不在保护的范围内</span></span><br><span class="line"><span class="comment">// 下面这个声明会成功执行</span></span><br><span class="line">MY_OBJECT.key = <span class="string">&#x27;otherValue&#x27;</span>; <span class="comment">// Use Object.freeze() to make object immutable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以用来定义数组</span></span><br><span class="line"><span class="keyword">const</span> MY_ARRAY = [];</span><br><span class="line"><span class="comment">// 可以向数组填充数据</span></span><br><span class="line">MY_ARRAY.push(<span class="string">&#x27;A&#x27;</span>); <span class="comment">// [&quot;A&quot;]</span></span><br><span class="line"><span class="comment">// 但是，将一个新数组赋给变量会引发错误</span></span><br><span class="line"><span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line">MY_ARRAY = [<span class="string">&#x27;B&#x27;</span>];</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;const关键字&quot;&gt;&lt;a href=&quot;#const关键字&quot; class=&quot;headerlink&quot; title=&quot;const关键字&quot;&gt;&lt;/a&gt;const关键字&lt;/h4&gt;&lt;p&gt;const关键字用于定义常量（一旦定义无法改变的变量，通常是表示一些固定不变的数据）&lt;/p&gt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端基础Day（二）</title>
    <link href="http://example.com/2021/09/26/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80Day%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://example.com/2021/09/26/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80Day%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2021-09-26T11:19:51.000Z</published>
    <updated>2021-09-26T11:24:26.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端Day2-SASS"><a href="#前端Day2-SASS" class="headerlink" title="前端Day2(SASS)"></a>前端Day2(SASS)</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>   1.css的扩展语言，本质上是脚本编程语言，通过sass所有的特点提高编写css代码的效率。即，用部分的sass代码替代之前繁琐的css代码</p><ol start="2"><li> sass底层是由面向对象的语言ruby来编写的（了解）</li></ol><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><pre><code>1. 先安装ruby再通过npm安装sass2. 使用vscode提供的插件 essay sass 快速的入手sass</code></pre><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><ol><li><p>sass需要放在以.sass .scss为后缀的文件之中</p></li><li><p>在vscode中setting中设置sass文件转为css文件相关的配置信息</p></li><li><p>```<br>{</p><pre><code>//保存scss代码后转为css&quot;easysass.compileAfterSave&quot;: true//指定什么格式转为css代码&quot;easysass.formats&quot;:[    &#123;        &quot;format&quot;:&quot;expanded&quot;,        &quot;extension&quot;: &quot;css&quot;    &#125;,    &#123;        &quot;format&quot;:&quot;compressed&quot;,        &quot;extension&quot;: &quot;.min.css&quot;    &#125;],&quot;easysass.targetDir&quot;: &quot;css/&quot;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">### 嵌套：</span><br><span class="line"></span><br><span class="line">1. 概念：可以标签样式代码里继续对其子标签设置样式</span><br><span class="line"></span><br><span class="line">2. 作用：让css代码中标签的层次更加清晰明了。解决了可能权重的问题。</span><br><span class="line"></span><br><span class="line">3. ```scss</span><br><span class="line">   #box&#123;</span><br><span class="line">   color：yellow；</span><br><span class="line">   p&#123;</span><br><span class="line">   color：blue；</span><br><span class="line">   span&#123;</span><br><span class="line">   color：red；</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   //转为css后</span><br><span class="line">   #box&#123;</span><br><span class="line">   color：yellow；</span><br><span class="line">   &#125;</span><br><span class="line">   #box p&#123;</span><br><span class="line">   color：blue；</span><br><span class="line">   &#125;</span><br><span class="line">   #box p span &#123;</span><br><span class="line">   color：red；</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h3><ol><li><p>概念：变量是一种存放css属性值的容器，一个变量可以保存一个样式属性值，定义的变量可以重复使用。类似于姓名。</p></li><li><p>作用：解决重复样式的繁琐修改问题</p></li><li><p>使用</p><p>定义一个变量（只需要定义一次，可以多次使用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$变量名：css属性值；</span><br></pre></td></tr></table></figure><p>运用变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">css属性名：$变量名；</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义变量BColor=red，用于header，main，footer三个标签</span></span><br><span class="line"><span class="variable">$BColor</span>：red；</span><br><span class="line"><span class="selector-tag">header</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>：<span class="variable">$BColor</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span>:&#123;</span><br><span class="line">background-color：<span class="variable">$BColor</span>；</span><br><span class="line">&#125;</span><br><span class="line">footer:&#123;</span><br><span class="line">background-color：<span class="variable">$BColor</span>；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//转css之后</span><br><span class="line">header&#123;</span><br><span class="line">background-color：red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">footer</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>：red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>：red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义变量的位置</p><p>   如果需要变量整个scss文件都可以使用，就在页面的开头定义变量。</p><p>   如果需要使用局部的变量，就在使用范围内定义变量。</p>   <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//scss文件开头：</span></span><br><span class="line"><span class="variable">$BColor</span>:red;<span class="comment">//该变量整个文件都可已使用</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span>&#123;</span><br><span class="line">    <span class="variable">$textColor</span>:red;<span class="comment">//该变量职能制header中使用</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>变量的命名规范：</p><pre><code>  变量可以包含数字，字母，    尽量不要使用数字开头    多个单词尽量以-间隔</code></pre></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前端Day2-SASS&quot;&gt;&lt;a href=&quot;#前端Day2-SASS&quot; class=&quot;headerlink&quot; title=&quot;前端Day2(SASS)&quot;&gt;&lt;/a&gt;前端Day2(SASS)&lt;/h2&gt;&lt;h3 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端 SASS" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF-SASS/"/>
    
  </entry>
  
  <entry>
    <title>Vue打包之后的路径问题</title>
    <link href="http://example.com/2021/09/26/Vue%E6%89%93%E5%8C%85%E4%B9%8B%E5%90%8E%E7%9A%84%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/09/26/Vue%E6%89%93%E5%8C%85%E4%B9%8B%E5%90%8E%E7%9A%84%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-09-25T16:03:36.000Z</published>
    <updated>2021-09-25T16:08:37.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue项目打包问题-脚手架版本vue-cli2"><a href="#vue项目打包问题-脚手架版本vue-cli2" class="headerlink" title="vue项目打包问题(脚手架版本vue-cli2)"></a>vue项目打包问题(脚手架版本vue-cli2)</h1><h2 id="项目目录如下："><a href="#项目目录如下：" class="headerlink" title="项目目录如下："></a>项目目录如下：</h2><h2 id="项目在运行npm-run-build命令之后在本地打开dist文件中的index-html，显示无内容"><a href="#项目在运行npm-run-build命令之后在本地打开dist文件中的index-html，显示无内容" class="headerlink" title="项目在运行npm run build命令之后在本地打开dist文件中的index.html，显示无内容"></a>项目在运行npm run build命令之后在本地打开dist文件中的index.html，显示无内容</h2><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><h2 id="1-可能是因为-router-》index中的mode：‘history’导致的错误，可以先添加注释，在进行打包，运行"><a href="#1-可能是因为-router-》index中的mode：‘history’导致的错误，可以先添加注释，在进行打包，运行" class="headerlink" title="1.可能是因为 router===》index中的mode：‘history’导致的错误，可以先添加注释，在进行打包，运行"></a>1.可能是因为 router===》index中的mode：‘history’导致的错误，可以先添加注释，在进行打包，运行</h2><h2 id="2-打包之后的项目路径不正确-》解决-》修改项目路径改为相对路径"><a href="#2-打包之后的项目路径不正确-》解决-》修改项目路径改为相对路径" class="headerlink" title="2.打包之后的项目路径不正确===》解决====》修改项目路径改为相对路径"></a>2.打包之后的项目路径不正确===》解决====》修改项目路径改为相对路径</h2><h2 id="修改config-》index-js-》build-》assetsPubilcPath中的‘-’改为‘-’"><a href="#修改config-》index-js-》build-》assetsPubilcPath中的‘-’改为‘-’" class="headerlink" title="修改config==》index.js==》build==》assetsPubilcPath中的‘/’改为‘./’"></a>修改config==》index.js==》build==》assetsPubilcPath中的‘/’改为‘./’</h2><h2 id="修改build-》utils-js-》ExtractTextPlugin-extract中增加一行pubilcPath-’-‘"><a href="#修改build-》utils-js-》ExtractTextPlugin-extract中增加一行pubilcPath-’-‘" class="headerlink" title="修改build==》utils.js==》ExtractTextPlugin.extract中增加一行pubilcPath:’../../‘"></a>修改build==》utils.js==》ExtractTextPlugin.extract中增加一行pubilcPath:’../../‘</h2><h1 id="脚手架vue-cli3"><a href="#脚手架vue-cli3" class="headerlink" title="(脚手架vue/cli3)"></a>(脚手架vue/cli3)</h1><h2 id="解决-vue-cli3打包后页面空白"><a href="#解决-vue-cli3打包后页面空白" class="headerlink" title="解决@vue/cli3打包后页面空白"></a>解决@vue/cli3打包后页面空白</h2><h2 id="npm-run-build-后放到服务器上页面显示空白"><a href="#npm-run-build-后放到服务器上页面显示空白" class="headerlink" title="npm run build 后放到服务器上页面显示空白"></a>npm run build 后放到服务器上页面显示空白</h2><h2 id="vue-config-js-项目目录下"><a href="#vue-config-js-项目目录下" class="headerlink" title="vue.config.js(项目目录下)"></a>vue.config.js(项目目录下)</h2><h2 id="若没有vue-config-js文件新建一个即可"><a href="#若没有vue-config-js文件新建一个即可" class="headerlink" title="若没有vue.config.js文件新建一个即可"></a>若没有vue.config.js文件新建一个即可</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">// Template for index.html</span><br><span class="line">index: path.resolve(__dirname, &#x27;../dist/index.html&#x27;),</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Paths</span><br><span class="line">assetsRoot: path.resolve(__dirname, &#x27;../dist&#x27;),</span><br><span class="line">assetsSubDirectory: &#x27;static&#x27;,</span><br><span class="line">//修改之前</span><br><span class="line">// assetsPubilcPath:&#x27;/&#x27;,</span><br><span class="line">//修改之后</span><br><span class="line">assetsPublicPath: &#x27;./&#x27;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (options.extract) &#123;</span><br><span class="line">return ExtractTextPlugin.extract(&#123;</span><br><span class="line">use: loaders,</span><br><span class="line">fallback: &#x27;vue-style-loader&#x27;,</span><br><span class="line">publicPath:&#x27;../../&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return [&#x27;vue-style-loader&#x27;].concat(loaders)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">publicPath: &#x27;./&#x27;,  //输出的根路径 默认是/ 如果你的网站是app.com/vue 这更改此配置项</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由模式采用hash模式（路由的默认模式）"><a href="#路由模式采用hash模式（路由的默认模式）" class="headerlink" title="路由模式采用hash模式（路由的默认模式）"></a>路由模式采用hash模式（路由的默认模式）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const routes = [</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">routes,</span><br><span class="line">// mode: &#x27;history&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export default router</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue项目打包问题-脚手架版本vue-cli2&quot;&gt;&lt;a href=&quot;#vue项目打包问题-脚手架版本vue-cli2&quot; class=&quot;headerlink&quot; title=&quot;vue项目打包问题(脚手架版本vue-cli2)&quot;&gt;&lt;/a&gt;vue项目打包问题(脚手架版本v</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>前端基础Day（一）</title>
    <link href="http://example.com/2021/09/25/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80Day%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2021/09/25/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80Day%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-09-25T15:47:18.000Z</published>
    <updated>2021-09-25T16:08:54.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端Day1"><a href="#前端Day1" class="headerlink" title="前端Day1"></a>前端Day1</h1><p>[TOC]</p><h2 id="前端的五个阶段"><a href="#前端的五个阶段" class="headerlink" title="前端的五个阶段"></a>前端的五个阶段</h2><p>第一阶段：网页实现 html+css</p><p>​    html+css+photoshop：页面的简单制作</p><p>​    css进阶 复杂页面的实现</p><p>​    企业级页面的快速构建 sass+bootstrap</p><p>​    做网站</p><p>第二阶段：Javascript基础以及数据交互</p><p>​    目的：有交互的做真实的带数据的网站</p><p>第三阶段：JavaScript进阶+node（后台）+webpack+mongodb（数据库）</p><p>​    可以独立完成项目的开发</p><p>第四阶段：vue+微信小程序</p><p>第五阶段：Recat+Recat native 扩展 typescript flutter</p><h2 id="项目的流程（Photoshop）"><a href="#项目的流程（Photoshop）" class="headerlink" title="项目的流程（Photoshop）"></a>项目的流程（Photoshop）</h2><p>确定需求并进行分析</p><p>​    产品经理或老板根据原始需求设计出原型图（UI）。不断的修改以满足客户的需求，最终根据需求生成保证原图。</p><p>根据原生图设计出psd格式的原型稿（UI）</p><p>​    psd是ps的专属格式，psd格式的文件能够反映出一个页面的所有元素，包括文字字体，图片的大小，颜色等所有的信息。</p><p>前端：把所有的页面（psd的格式文件）切片转为前端工程师所需要的图片（UI或者是前端）</p><p>前端：实现页面，完成页面功能的开发。</p><p>后端：完成服务器端程序的开发以及数据库的开发</p><p>测试：对功能进行测试，集成测试，压力测试，性能测试，回归测试，自动化测试，云平台测试。</p><p>运维：上线+运维</p><h2 id="Photoshop简介以及安装"><a href="#Photoshop简介以及安装" class="headerlink" title="Photoshop简介以及安装"></a>Photoshop简介以及安装</h2><p>主要未构建位图。</p><p>位图：有很多个像素点构成的一种图片格式。每个像素点都是个很小的小方块，一个像素点可以表达一种颜色。</p><p>版本：cc2018</p><h2 id="Photoshop工作区"><a href="#Photoshop工作区" class="headerlink" title="Photoshop工作区"></a>Photoshop工作区</h2><p>窗口-》工作区</p><p>窗口-》信息</p><p>左侧的工具栏为常用的工具</p><h2 id="HTML概念"><a href="#HTML概念" class="headerlink" title="HTML概念"></a>HTML概念</h2><p>HTML是用于制作网页的计算机语言</p><p>网页：用于显示网络资源的载体。网络资源可以是图片，视频，文字，音频，各种框，超链接······。</p><p>HTML：hyper-text Markup language 超文本标记语言</p><p>​    超文本：指网页上展示的内容，不仅仅是文本。超文本包含了图片，视频，文字，音频，各种框，超链接······。</p><p>​    标记：用于描述超文本的代码格式，页面上的每一个超文本都有一个对应的标签来对应</p><h2 id="HTML基础标签"><a href="#HTML基础标签" class="headerlink" title="HTML基础标签"></a>HTML基础标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;页面地址&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> //a标签负责超链接</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片地址&quot;</span> /&gt;</span> //src负责展示的图片的地址</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1-6</span>&gt;</span><span class="tag">&lt;/<span class="name">h1-6</span>&gt;</span>//标题标签</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> //段落标签</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span> //换行标签</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;nbsp;</span> //特殊符号----空格 </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端Day1&quot;&gt;&lt;a href=&quot;#前端Day1&quot; class=&quot;headerlink&quot; title=&quot;前端Day1&quot;&gt;&lt;/a&gt;前端Day1&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;前端的五个阶段&quot;&gt;&lt;a href=&quot;#前端的五个阶段&quot; class=&quot;h</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Git相关（一）</title>
    <link href="http://example.com/2021/09/25/Git%E7%9B%B8%E5%85%B3%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2021/09/25/Git%E7%9B%B8%E5%85%B3%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-09-25T15:45:27.000Z</published>
    <updated>2021-09-25T16:08:08.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="Git的使用"><a href="#Git的使用" class="headerlink" title="Git的使用"></a>Git的使用</h2><h3 id="Git使用前的配置"><a href="#Git使用前的配置" class="headerlink" title="Git使用前的配置"></a>Git使用前的配置</h3><ol><li>配置提交人姓名 git config –global user.name  提交人姓名</li><li>配置提交人邮箱  git config –global user.name 提交人邮箱</li><li>查看 git 配置信息 git config –list</li></ol><p><strong>注意</strong></p><ol><li>如果要对配置信息进行修改，重复上面命令即可</li><li>配置只需要执行一次</li></ol><h2 id="提交步骤"><a href="#提交步骤" class="headerlink" title="提交步骤"></a>提交步骤</h2><ol><li><p>git init 初始化 git 仓库</p></li><li><p>git status 查看文件状态</p></li><li><p>git add 文件列表 追踪文件</p></li><li><p>git commit -m 提交信息 向仓库中提交代码</p></li><li><p>git log 查看提交记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//第一次提交</span><br><span class="line">git init //初始化仓库操作</span><br><span class="line">git add . //将文件暂存到本地</span><br><span class="line">git commit -m &#x27;你需要填写的信息&#x27; //‘’中可以是中文</span><br><span class="line">git remote add origin `````   //你的仓库地址  在新建仓库是会有提示</span><br><span class="line">git push -u origin main //在GitHub中新建的仓库默认的分支是main 在Gitee中新建的仓库分支是master 这些在你新建仓库的时候都会有</span><br><span class="line"></span><br><span class="line">//若是想要提交到新建的分支可以新建分支</span><br><span class="line">git branch 分支名</span><br><span class="line">git checkout 你新建的分支名 //切换到新建的分支</span><br><span class="line">//若是第一次提交输入</span><br><span class="line">git remote add origin `````</span><br><span class="line">//若是后续开发所需要得到提交</span><br><span class="line">git push -u origin 你所要提交的分支名</span><br></pre></td></tr></table></figure></li></ol><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><ul><li>用暂存区中的文件覆盖工作目录的文件 git checkout 文件</li><li>将文件从暂存区中删除 git rm –cached 文件</li><li>将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录  git reset –hard commitID</li></ul><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><blockquote><p>为了便于理解，大家暂时可以认为分支就是当前工作目录中代码的一份副本。</p><p>使用分支，可以让我们从开发主线上分离出来，以免影响开发主线。</p></blockquote><h3 id="分支细分"><a href="#分支细分" class="headerlink" title="分支细分"></a>分支细分</h3><ol><li><p>主分支( master ) ：第一次向 git 仓库中提交更新记录时会自动产生的一个分支</p></li><li><p>开发分支( develop )：作为开发的分支，基于 master 分支创建</p></li><li><p>功能分支( feature )：作为开发具体功能的分支，基于开发分支创建</p></li></ol><p><strong>功能分支 -&gt; 开发分支 -&gt; 主分支</strong></p><h3 id="分支命令"><a href="#分支命令" class="headerlink" title="分支命令"></a>分支命令</h3><ol><li>git branch 查看分支</li><li>git branch 分支名称 创建分支</li><li>git checkout 分支名称 切换分支</li><li>git merge 来源分支 合并分支</li><li>git branch -d 分支名称 删除分支 （分支被合并后才允许删除）（-D 强制删除）</li></ol><h3 id="暂时保存"><a href="#暂时保存" class="headerlink" title="暂时保存"></a>暂时保存</h3><blockquote><p>在git中，可以暂时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本</p></blockquote><p>临时转向其他工作。</p><ul><li>存储临时改动:  git stash</li><li>恢复改动:  git stash pop</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h1&gt;&lt;h2 id=&quot;Git的使用&quot;&gt;&lt;a href=&quot;#Git的使用&quot; class=&quot;headerlink&quot; title=&quot;Git的使用&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Git" scheme="http://example.com/categories/Git/"/>
    
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Laravel学习（一）</title>
    <link href="http://example.com/2021/09/25/Laravel%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2021/09/25/Laravel%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-09-25T15:37:08.000Z</published>
    <updated>2021-09-25T16:08:29.635Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Laravel5-7"><a href="#Laravel5-7" class="headerlink" title="Laravel5.7"></a>Laravel5.7</h3><h4 id="一、使用Git-Clone将项目复制到新的开发环境中"><a href="#一、使用Git-Clone将项目复制到新的开发环境中" class="headerlink" title="一、使用Git Clone将项目复制到新的开发环境中"></a>一、使用Git Clone将项目复制到新的开发环境中</h4><p>1.首先在原始文件夹中（假设现在使用的master分支）我们需要推送项目到Git中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//以码云为例 网址：http://gitee.com</span><br><span class="line">git add . //将代码暂存到本地仓库</span><br><span class="line">git commit -m &#x27;初始化本地仓库&#x27;//提交信息</span><br><span class="line">gti remote add origin https://gitee.com/user/entrepot.git   //entrepot是仓库的意思 //user则为用户在gitee的用户名</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>2.从Gitee上复制下来项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/user/entrepot.git</span><br></pre></td></tr></table></figure><p>3.接下来我们需要进行composer install来解决dependencies：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer install</span><br></pre></td></tr></table></figure><p>4.完成后，我们需要建立.env文件，因为.env默认是gitee所忽略的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp .env.example .env</span><br></pre></td></tr></table></figure><p>5.因为env.example中默认没有app key，所以我们在.env中生成新的app key：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan key:generate</span><br></pre></td></tr></table></figure><p>6.修改.env文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DB_CONNECTION=mysql //链接数据库</span><br><span class="line">DB_HOST=10.10.102.92 //IP地址</span><br><span class="line">DB_PORT=3306 //数据库端口号</span><br><span class="line">DB_DATABASE=webshop //数据库名称</span><br><span class="line">DB_USERNAME=root //数据库用户名</span><br><span class="line">DB_PASSWORD=root //数据库密码</span><br></pre></td></tr></table></figure><p>7.保存后，运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artsian migrate</span><br></pre></td></tr></table></figure><h4 id="二、app-gt-Http-gt"><a href="#二、app-gt-Http-gt" class="headerlink" title="二、app==&gt;Http==&gt;"></a>二、app==&gt;Http==&gt;</h4><p>主要为控制器的存放</p><p>新建控制器的命令为:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:controller PhpController<span class="comment">//在控制器的跟目录下新建一个控制器</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artsian make:controller filer/PhpController <span class="comment">//在指定文件目录下新建一个控制器</span></span><br></pre></td></tr></table></figure><h4 id="三、resources-gt-views-为视图存放目录-界面显示"><a href="#三、resources-gt-views-为视图存放目录-界面显示" class="headerlink" title="三、resources==&gt;views(为视图存放目录,界面显示)"></a>三、resources==&gt;views(为视图存放目录,界面显示)</h4><p>新建的视图后缀名需要是 index.blade.php</p><p>主页页面结构：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">extends</span>(<span class="string">&#x27;frame&#x27;</span>)<span class="comment">//frame为继承模板</span></span><br><span class="line">@section(<span class="string">&#x27;style&#x27;</span>)<span class="comment">//引入的style的样式</span></span><br><span class="line">@endsection</span><br><span class="line"></span><br><span class="line">@section(<span class="string">&#x27;content&#x27;</span>)<span class="comment">//界面主要内容</span></span><br><span class="line">@endsection</span><br><span class="line"></span><br><span class="line">@section(<span class="string">&#x27;script&#x27;</span>)<span class="comment">//js脚本</span></span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure><h4 id="四、引入外部js文件的方式"><a href="#四、引入外部js文件的方式" class="headerlink" title="四、引入外部js文件的方式"></a>四、引入外部js文件的方式</h4><p>在project==》public ==》 js(文件顺序)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@section(<span class="string">&#x27;script&#x27;</span>)<span class="comment">//js脚本</span></span><br><span class="line">&lt;scritp src=<span class="string">&quot;&#123;&#123;URL::asset(js/javascritp.js)&#125;&#125;&quot;</span>&gt;&lt;/script&gt;<span class="comment">//举例</span></span><br><span class="line">    &lt;scritp src=<span class="string">&quot;http://xxx.xxx.xxx&quot;</span>&gt;&lt;/script&gt;<span class="comment">//根据网址引入的js</span></span><br><span class="line">@endsection</span><br><span class="line"><span class="comment">//css的引入方法大致同上</span></span><br></pre></td></tr></table></figure><h4 id="五、主界面点击模块跳转到对应的页面"><a href="#五、主界面点击模块跳转到对应的页面" class="headerlink" title="五、主界面点击模块跳转到对应的页面"></a>五、主界面点击模块跳转到对应的页面</h4><p>project==&gt;routes==&gt;web.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Route::prefix(<span class="string">&#x27;/admin&#x27;</span>)-&gt;group(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//成组</span></span><br><span class="line">Route::get(<span class="string">&#x27;/shoplist&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"><span class="keyword">return</span> view(<span class="string">&#x27;shoplist&#x27;</span>);<span class="comment">//返回对应的视图</span></span><br><span class="line">&#125;)-&gt;name(<span class="string">&#x27;shoplist&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>模板frome的跳转方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//在模板下写入</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li class=&quot;&lt;?php</span><br><span class="line">        if(stripos($_SERVER[&#x27;REQUSET_URI&#x27;],&#x27;admin/shoplist&#x27;) != false) echo &#x27;active&#x27;?&gt;&quot;&gt;</span><br><span class="line">    &lt;a href=&quot;/admin/shoplist&quot;&gt;</span><br><span class="line">   商品信息</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h4 id="六、在phpstudy-pro中搭建网站环境的注意项："><a href="#六、在phpstudy-pro中搭建网站环境的注意项：" class="headerlink" title="六、在phpstudy_pro中搭建网站环境的注意项："></a>六、在phpstudy_pro中搭建网站环境的注意项：</h4><p>在project==》public==》.htaccess</p><p>1.首先复制一份.htaccess文件</p><p>2.在phpstudy中搭建网址:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www.shoppping.com:80 //默认端口为80端口，若修改在进入浏览器之后则需要在网址后缀中添加所修改的端口号</span><br><span class="line">//搭建网址的目录中不可汉中文</span><br></pre></td></tr></table></figure><p>3.再次打开.htaccess文件 将复制的.htaccess文件中的内容重新复制到.htaccess文件中</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Laravel5-7&quot;&gt;&lt;a href=&quot;#Laravel5-7&quot; class=&quot;headerlink&quot; title=&quot;Laravel5.7&quot;&gt;&lt;/a&gt;Laravel5.7&lt;/h3&gt;&lt;h4 id=&quot;一、使用Git-Clone将项目复制到新的开发环境中&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="Laravel" scheme="http://example.com/categories/Laravel/"/>
    
    
    <category term="Laravel" scheme="http://example.com/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>Laravel问题（一）</title>
    <link href="http://example.com/2021/09/25/Laravel%E9%97%AE%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2021/09/25/Laravel%E9%97%AE%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-09-25T15:35:37.000Z</published>
    <updated>2021-10-02T06:06:30.084Z</updated>
    
    <content type="html"><![CDATA[<p>composer创建laravel项目报错问题</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\91790\Desktop\ckblog\themes\keep\source\images\composer报错信息.png"                      alt="composer报错信息"                ></p><p>若显示如图的报错信息，则需要更换composer镜像源</p><p>之前用的是composer中国镜像，地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://pkg.phpcomposer.com/#how-to-install-composer</span><br></pre></td></tr></table></figure><p>换成阿里镜像后成功创建laravel项目</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\91790\AppData\Roaming\Typora\typora-user-images\image-20210708151656481.png"                      alt="image-20210708151656481"                ></p><p>阿里镜像地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://developer.aliyun.com/article/726948spm=a2c6h.14164896.0.0.6f8a791fPW7fDO</span><br></pre></td></tr></table></figure><p>阿里镜像（切换）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure><p>切换之后可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -gl</span><br></pre></td></tr></table></figure><p>来查看镜像地址</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\91790\AppData\Roaming\Typora\typora-user-images\image-20210708152013277.png"                      alt="image-20210708152013277"                ></p><p>注：切换镜像需要安装composer</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;composer创建laravel项目报错问题&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     d</summary>
      
    
    
    
    <category term="Laravel" scheme="http://example.com/categories/Laravel/"/>
    
    
    <category term="Laravel" scheme="http://example.com/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础</title>
    <link href="http://example.com/2021/09/25/Vue%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/09/25/Vue%E5%9F%BA%E7%A1%80/</id>
    <published>2021-09-25T15:34:22.000Z</published>
    <updated>2021-09-25T16:08:43.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a>Vue简介</h2><ol><li>JavaScript框架</li><li>简化DOM操作</li><li>响应式数据驱动</li></ol><h2 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h2><ul><li>v-text   设置标签的文本值( textContent )</li><li>v-html  设置标签的innerHTML（就是文本里面可以包含html标签）</li><li>v-on 为元素绑定事件  不用加 on</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   &lt;!-- 可以使用@click=<span class="string">&quot;click&quot;</span>  --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;事件绑定 v-on&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;click&quot;</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  var app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">   el: &#x27;#app&#x27;,</span></span><br><span class="line"><span class="xml">   data:&#123;</span></span><br><span class="line"><span class="xml">   click: function () &#123;</span></span><br><span class="line"><span class="xml">       console.log(&#x27;ok&#x27;);</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">   &#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">      </span></span><br></pre></td></tr></table></figure><ul><li>v-show 根据表达值得真假，切换元素的显示和隐藏</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">&lt;img src=&quot;&quot; v-show=&quot;true&quot;&gt;    </span><br><span class="line">&lt;img src=&quot;&quot; v-show=&quot;isShow&quot;&gt;    </span><br><span class="line">&lt;img src=&quot;&quot; v-show=&quot;age&gt;=18&quot;&gt;    </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">el:&quot;#app&quot;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        isShow:false,</span><br><span class="line">        age:18</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>v-if  根据表达值的真假，切换元素的显示和隐藏（操作dom元素）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">&lt;img src=&quot;&quot; v-if=&quot;true&quot;&gt;    </span><br><span class="line">&lt;img src=&quot;&quot; v-if=&quot;isShow&quot;&gt;    </span><br><span class="line">&lt;img src=&quot;&quot; v-if=&quot;表达式&quot;&gt;    </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">el:&quot;#app&quot;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        isShow:false,</span><br><span class="line">        age:18</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>v-bind 设置元素的属性（比如：src title calss）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt; </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgSrc&quot;</span>&gt;</span>    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgSrc&quot;</span>&gt;</span>    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">var app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">el:&quot;#app&quot;,</span></span><br><span class="line"><span class="xml">    data:&#123;</span></span><br><span class="line"><span class="xml">        imgSrc</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br></pre></td></tr></table></figure><ul><li>v-for 循环数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">list</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">id</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">name</span>: <span class="string">&#x27;小花&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">age</span>: <span class="number">15</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">id</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">name</span>: <span class="string">&#x27;李强&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">age</span>: <span class="number">11</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">id</span>: <span class="number">2</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">name</span>: <span class="string">&#x27;小白&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">age</span>: <span class="number">16</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">id</span>: <span class="number">3</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">name</span>: <span class="string">&#x27;小黑&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">age</span>: <span class="number">12</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            ]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>v-model 获取设置表达元素的值（双向数据绑定）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">v-model</span>=<span class="string">&#x27;message&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">message</span>: <span class="string">&quot;你好啊&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue简介&quot;&gt;&lt;a href=&quot;#Vue简介&quot; class=&quot;headerlink&quot; title=&quot;Vue简介&quot;&gt;&lt;/a&gt;Vue简介&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;JavaScript框架&lt;/li&gt;
&lt;li&gt;简化DOM操作&lt;/li&gt;
&lt;li&gt;响应式数据驱动&lt;/li&gt;
</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/09/25/hello-world/"/>
    <id>http://example.com/2021/09/25/hello-world/</id>
    <published>2021-09-25T14:29:18.582Z</published>
    <updated>2021-09-25T14:29:18.582Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Che</summary>
      
    
    
    
    
  </entry>
  
</feed>
