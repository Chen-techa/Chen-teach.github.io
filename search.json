[{"title":"Git相关（一）","url":"/2021/09/25/Git%E7%9B%B8%E5%85%B3%EF%BC%88%E4%B8%80%EF%BC%89/","content":"GitGit的使用Git使用前的配置\n配置提交人姓名 git config –global user.name  提交人姓名\n配置提交人邮箱  git config –global user.name 提交人邮箱\n查看 git 配置信息 git config –list\n\n注意\n\n如果要对配置信息进行修改，重复上面命令即可\n配置只需要执行一次\n\n提交步骤\ngit init 初始化 git 仓库\n\ngit status 查看文件状态\n\ngit add 文件列表 追踪文件\n\ngit commit -m 提交信息 向仓库中提交代码\n\ngit log 查看提交记录\n//第一次提交git init //初始化仓库操作git add . //将文件暂存到本地git commit -m &#x27;你需要填写的信息&#x27; //‘’中可以是中文git remote add origin `````   //你的仓库地址  在新建仓库是会有提示git push -u origin main //在GitHub中新建的仓库默认的分支是main 在Gitee中新建的仓库分支是master 这些在你新建仓库的时候都会有//若是想要提交到新建的分支可以新建分支git branch 分支名git checkout 你新建的分支名 //切换到新建的分支//若是第一次提交输入git remote add origin `````//若是后续开发所需要得到提交git push -u origin 你所要提交的分支名\n\n撤销\n用暂存区中的文件覆盖工作目录的文件 git checkout 文件\n将文件从暂存区中删除 git rm –cached 文件\n将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录  git reset –hard commitID\n\n分支\n为了便于理解，大家暂时可以认为分支就是当前工作目录中代码的一份副本。\n使用分支，可以让我们从开发主线上分离出来，以免影响开发主线。\n\n分支细分\n主分支( master ) ：第一次向 git 仓库中提交更新记录时会自动产生的一个分支\n\n开发分支( develop )：作为开发的分支，基于 master 分支创建\n\n功能分支( feature )：作为开发具体功能的分支，基于开发分支创建\n\n\n功能分支 -&gt; 开发分支 -&gt; 主分支\n分支命令\ngit branch 查看分支\ngit branch 分支名称 创建分支\ngit checkout 分支名称 切换分支\ngit merge 来源分支 合并分支\ngit branch -d 分支名称 删除分支 （分支被合并后才允许删除）（-D 强制删除）\n\n暂时保存\n在git中，可以暂时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本\n\n临时转向其他工作。\n\n存储临时改动:  git stash\n恢复改动:  git stash pop\n\n","tags":["Git"]},{"title":"Laravel学习（一）","url":"/2021/09/25/Laravel%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/","content":"Laravel5.7一、使用Git Clone将项目复制到新的开发环境中1.首先在原始文件夹中（假设现在使用的master分支）我们需要推送项目到Git中\n//以码云为例 网址：http://gitee.comgit add . //将代码暂存到本地仓库git commit -m &#x27;初始化本地仓库&#x27;//提交信息gti remote add origin https://gitee.com/user/entrepot.git   //entrepot是仓库的意思 //user则为用户在gitee的用户名git push -u origin master\n\n2.从Gitee上复制下来项目\ngit clone https://gitee.com/user/entrepot.git\n\n3.接下来我们需要进行composer install来解决dependencies：\ncomposer install\n\n4.完成后，我们需要建立.env文件，因为.env默认是gitee所忽略的文件：\ncp .env.example .env\n\n5.因为env.example中默认没有app key，所以我们在.env中生成新的app key：\nphp artisan key:generate\n\n6.修改.env文件\nDB_CONNECTION=mysql //链接数据库DB_HOST=10.10.102.92 //IP地址DB_PORT=3306 //数据库端口号DB_DATABASE=webshop //数据库名称DB_USERNAME=root //数据库用户名DB_PASSWORD=root //数据库密码\n\n7.保存后，运行\nphp artsian migrate\n\n\n\n二、app==&gt;Http==&gt;主要为控制器的存放\n新建控制器的命令为:\nphp artisan make:controller PhpController//在控制器的跟目录下新建一个控制器\n\n\n\nphp artsian make:controller filer/PhpController //在指定文件目录下新建一个控制器\n\n三、resources==&gt;views(为视图存放目录,界面显示)新建的视图后缀名需要是 index.blade.php\n主页页面结构：\n@extends(&#x27;frame&#x27;)//frame为继承模板@section(&#x27;style&#x27;)//引入的style的样式@endsection@section(&#x27;content&#x27;)//界面主要内容@endsection@section(&#x27;script&#x27;)//js脚本@endsection\n\n四、引入外部js文件的方式在project==》public ==》 js(文件顺序)\n@section(&#x27;script&#x27;)//js脚本\t&lt;scritp src=&quot;&#123;&#123;URL::asset(js/javascritp.js)&#125;&#125;&quot;&gt;&lt;/script&gt;//举例    &lt;scritp src=&quot;http://xxx.xxx.xxx&quot;&gt;&lt;/script&gt;//根据网址引入的js@endsection//css的引入方法大致同上\n\n五、主界面点击模块跳转到对应的页面project==&gt;routes==&gt;web.php\nRoute::prefix(&#x27;/admin&#x27;)-&gt;group(function()&#123; //成组\tRoute::get(&#x27;/shoplist&#x27;,function()&#123; \t\treturn view(&#x27;shoplist&#x27;);//返回对应的视图\t&#125;)-&gt;name(&#x27;shoplist&#x27;);&#125;)\n\n模板frome的跳转方法\n//在模板下写入&lt;ul&gt;    &lt;li class=&quot;&lt;?php        if(stripos($_SERVER[&#x27;REQUSET_URI&#x27;],&#x27;admin/shoplist&#x27;) != false) echo &#x27;active&#x27;?&gt;&quot;&gt;    \t&lt;a href=&quot;/admin/shoplist&quot;&gt;   \t\t\t商品信息        &lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;\n\n六、在phpstudy_pro中搭建网站环境的注意项：在project==》public==》.htaccess\n1.首先复制一份.htaccess文件\n2.在phpstudy中搭建网址:\nwww.shoppping.com:80 //默认端口为80端口，若修改在进入浏览器之后则需要在网址后缀中添加所修改的端口号//搭建网址的目录中不可汉中文\n\n3.再次打开.htaccess文件 将复制的.htaccess文件中的内容重新复制到.htaccess文件中\n","tags":["Laravel"]},{"title":"Laravel问题（一）","url":"/2021/09/25/Laravel%E9%97%AE%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/","content":"composer创建laravel项目报错问题\n\n若显示如图的报错信息，则需要更换composer镜像源\n之前用的是composer中国镜像，地址：\nhttps://pkg.phpcomposer.com/#how-to-install-composer\n\n换成阿里镜像后成功创建laravel项目\n\n阿里镜像地址：\nhttps://developer.aliyun.com/article/726948spm=a2c6h.14164896.0.0.6f8a791fPW7fDO\n\n阿里镜像（切换）\ncomposer config -g repo.packagist composer https://mirrors.aliyun.com/composer/\n\n切换之后可以使用\ncomposer config -gl\n\n来查看镜像地址\n\n注：切换镜像需要安装composer\n","tags":["Laravel"]},{"title":"Vue基础","url":"/2021/09/25/Vue%E5%9F%BA%E7%A1%80/","content":"Vue简介\nJavaScript框架\n简化DOM操作\n响应式数据驱动\n\nVue指令\nv-text   设置标签的文本值( textContent )\nv-html  设置标签的innerHTML（就是文本里面可以包含html标签）\nv-on 为元素绑定事件  不用加 on\n\n   \t\t&lt;!-- 可以使用@click=&quot;click&quot;  --&gt;  &lt;input type=&quot;button&quot; value=&quot;事件绑定 v-on&quot; v-on:click=&quot;click&quot; id=&quot;app&quot;&gt;  var app = new Vue(&#123;   el: &#x27;#app&#x27;,   data:&#123;   \tclick: function () &#123;       console.log(&#x27;ok&#x27;);    &#125;,   &#125;&#125;)      \n\n\nv-show 根据表达值得真假，切换元素的显示和隐藏\n\n&lt;div id=&quot;app&quot;&gt;&lt;img src=&quot;&quot; v-show=&quot;true&quot;&gt;    &lt;img src=&quot;&quot; v-show=&quot;isShow&quot;&gt;    &lt;img src=&quot;&quot; v-show=&quot;age&gt;=18&quot;&gt;    &lt;/div&gt;var app = new Vue(&#123;el:&quot;#app&quot;,    data:&#123;        isShow:false,        age:18    &#125;&#125;)\n\n\nv-if  根据表达值的真假，切换元素的显示和隐藏（操作dom元素）\n\n&lt;div id=&quot;app&quot;&gt;&lt;img src=&quot;&quot; v-if=&quot;true&quot;&gt;    &lt;img src=&quot;&quot; v-if=&quot;isShow&quot;&gt;    &lt;img src=&quot;&quot; v-if=&quot;表达式&quot;&gt;    &lt;/div&gt;var app = new Vue(&#123;el:&quot;#app&quot;,    data:&#123;        isShow:false,        age:18    &#125;&#125;)\n\n\nv-bind 设置元素的属性（比如：src title calss）\n\n&lt;div id=&quot;app&quot;&gt; &lt;img v-bind:src=&quot;imgSrc&quot;&gt;    &lt;img :src=&quot;imgSrc&quot;&gt;    &lt;/div&gt;var app = new Vue(&#123;el:&quot;#app&quot;,    data:&#123;        imgSrc    &#125;&#125;)\n\n\nv-for 循环数据\n\n&lt;div id=&quot;app&quot;&gt;        &lt;ul&gt;            &lt;li v-for=&quot;item in list&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/li&gt;        &lt;/ul&gt;    &lt;/div&gt;        &lt;script&gt;    var app = new Vue(&#123;        el: &#x27;#app&#x27;,        data: &#123;            list: [                &#123;                    id: 0,                    name: &#x27;小花&#x27;,                    age: 15                &#125;,                &#123;                    id: 1,                    name: &#x27;李强&#x27;,                    age: 11                &#125;,                &#123;                    id: 2,                    name: &#x27;小白&#x27;,                    age: 16                &#125;,                &#123;                    id: 3,                    name: &#x27;小黑&#x27;,                    age: 12                &#125;,            ]        &#125;    &#125;)&lt;/script&gt;\n\n\nv-model 获取设置表达元素的值（双向数据绑定）\n\n&lt;div id=&quot;app&quot;&gt;        &lt;input type=&#x27;text&#x27; v-model=&#x27;message&#x27;&gt;    &lt;/div&gt;        &lt;script&gt;    var app = new Vue(&#123;        el: &#x27;#app&#x27;,        data: &#123;            message: &quot;你好啊&quot;        &#125;    &#125;)&lt;/script&gt;","tags":["Vue"]},{"title":"Hello World","url":"/2021/09/25/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"前端基础Day（一）","url":"/2021/09/25/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80Day%EF%BC%88%E4%B8%80%EF%BC%89/","content":"前端Day1[TOC]\n前端的五个阶段第一阶段：网页实现 html+css\n​    html+css+photoshop：页面的简单制作\n​    css进阶 复杂页面的实现\n​    企业级页面的快速构建 sass+bootstrap\n​    做网站\n第二阶段：Javascript基础以及数据交互\n​    目的：有交互的做真实的带数据的网站\n第三阶段：JavaScript进阶+node（后台）+webpack+mongodb（数据库）\n​    可以独立完成项目的开发\n第四阶段：vue+微信小程序\n第五阶段：Recat+Recat native 扩展 typescript flutter\n项目的流程（Photoshop）确定需求并进行分析\n​    产品经理或老板根据原始需求设计出原型图（UI）。不断的修改以满足客户的需求，最终根据需求生成保证原图。\n根据原生图设计出psd格式的原型稿（UI）\n​    psd是ps的专属格式，psd格式的文件能够反映出一个页面的所有元素，包括文字字体，图片的大小，颜色等所有的信息。\n前端：把所有的页面（psd的格式文件）切片转为前端工程师所需要的图片（UI或者是前端）\n前端：实现页面，完成页面功能的开发。\n后端：完成服务器端程序的开发以及数据库的开发\n测试：对功能进行测试，集成测试，压力测试，性能测试，回归测试，自动化测试，云平台测试。\n运维：上线+运维\nPhotoshop简介以及安装主要未构建位图。\n位图：有很多个像素点构成的一种图片格式。每个像素点都是个很小的小方块，一个像素点可以表达一种颜色。\n版本：cc2018\nPhotoshop工作区窗口-》工作区\n窗口-》信息\n左侧的工具栏为常用的工具\nHTML概念HTML是用于制作网页的计算机语言\n网页：用于显示网络资源的载体。网络资源可以是图片，视频，文字，音频，各种框，超链接······。\nHTML：hyper-text Markup language 超文本标记语言\n​    超文本：指网页上展示的内容，不仅仅是文本。超文本包含了图片，视频，文字，音频，各种框，超链接······。\n​    标记：用于描述超文本的代码格式，页面上的每一个超文本都有一个对应的标签来对应\nHTML基础标签&lt;a href=&quot;页面地址&quot;&gt;&lt;/a&gt; //a标签负责超链接\n\n&lt;img src=&quot;图片地址&quot; /&gt; //src负责展示的图片的地址\n\n&lt;h1-6&gt;&lt;/h1-6&gt;//标题标签\n\n&lt;p&gt;&lt;/p&gt; //段落标签\n\n&lt;br/&gt; //换行标签\n\n&amp;nbsp; //特殊符号----空格 \n\n\n\n","tags":["前端"]}]